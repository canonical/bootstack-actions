name: Functional tests

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        description: "Python version"
        type: string
        default: "3.10"
      tox-version:
        required: false
        description: |
          Tox version, which should be used, e.g. `<4`. If not specified, the
          latest version of tox will be installed.
        type: string
        default: ""
      working-directory:
        required: false
        description: "To change working directory"
        type: string
        default: "."
      timeout-minutes:
        required: false
        description: "Configurable timeout limit for functional tests job"
        type: number
        default: 60
      snapcraft:
        required: false
        description: |
          Flag if snap is tested. If set to true, snapcraft will be installed.
        type: boolean
        default: false
      commands:
        required: false
        description: |
          Command to run functional tests in strategies. It defaults to
          `make functional`, but is defined as a list, so `['make functional']`.
          This allows you to run multiple tests with different parameters.
          Examples:
          - ['FUNC_ARGS="--series jammy" make functional',
             'FUNC_ARGS="--series focal" make functional']
          - ['tox -e func -- -sv --series jammy', 'tox -e func -- -sv --series focal']
        type: string
        default: "['make functional']"
      # actions-operator
      provider:
        required: false
        type: string
        default: "lxd"
      nested-containers:
        required: false
        type: boolean
        default: false
      juju-channel:
        required: false
        type: string
        default: "2.9/stable"

jobs:
  func:
    name: Functional tests
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    strategy:
      fail-fast: true
      matrix:
        command: ${{ fromJson(inputs.commands) }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          python -m pip install "tox${{ inputs.tox-version }}"
      - name: Setup Juju environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: ${{ inputs.provider }}
          juju-channel: ${{ inputs.juju-channel }}
      - name: Remove tox install by actions-operator
        run: sudo apt remove tox -y
      - name: Install snapcraft
        if: ${{ inputs.snapcraft }}
        run: sudo snap install snapcraft --classic
      - name: Enabled nested LXD containers
        if: ${{ inputs.provider == 'lxd' && inputs.nested-containers }}
        run: |
          # create new lxd project and configure nesting & privileged
          lxc profile show default > default-lxc-profile.yaml
          lxc project create nested-lxd
          lxc profile edit --project nested-lxd default < default-lxc-profile.yaml
          lxc profile set --project nested-lxd default security.nesting=true
          lxc profile set --project nested-lxd default security.privileged=true
          # set default project to be nested-lxd project
          juju model-default project=nested-lxd
      - name: Show juju information
        run: |
          juju version
          juju controllers | grep Version -A 1 | awk '{print $9}'
      - name: Run tests with `${{ matrix.command }}`
        working-directory: ${{ inputs.working-directory }}
        run: ${{ matrix.command }}
